name: Terraform Plan

on:
  push:
    branches: [ $default-branch ]
  pull_request:
    branches: [ $default-branch ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
   # checkout the repo
      - uses: actions/checkout@v2 

      - name: Read variable file
        uses: tw3lveparsecs/github-actions-setvars@v0.1
        with:
          envFilePath: ${{  env.working_directory  }}/${{  env.envFilePath  }}
        id: getvariables
   
      - name: check tfstate name
        shell: pwsh
        run: |
          $variablePrefix = "${{  env.envFilePath  }}" -split "_" | select -first 1
          write-output "varprefix $variablePrefix"
          $statePrefix = "${{  env.TFSTATENAME  }}" -split "_" | select -first 1
          write-output "stateprefix $statePrefix"
          if( $statePrefix -notmatch  $variablePrefix ){
          throw "tfstatename variable prefix does not match the yaml file prefix - please check variable"
          }
            
      - uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - uses: Azure/get-keyvault-secrets@v1
        with: 
          keyvault: ${{ env.AKV }}
          secrets: 'terraformrg, SubscriptionID, DevOps-PipelineSP-ID, DevOps-PipelineSP-Secret, tenantid, terraformstorageaccount, tf-storage-key, tfplancontainer, tfstatecontainer'
        id: myGetSecretAction
      
      - uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '__'
          tokenSuffix: '__'
          files: '["**/*.tf"]'
        env:
          terraformstorageaccount: ${{ steps.myGetSecretAction.outputs.terraformstorageaccount }}
          tfstatecontainer: ${{ steps.myGetSecretAction.outputs.tfstatecontainer }}
          tf-storage-key: ${{ steps.myGetSecretAction.outputs.tf-storage-key }}
          tfstatename: ${{ env.TFSTATENAME }}
          rgname1: ${{ env.RGNAME1 }}
        

        
      - uses: hashicorp/setup-terraform@v1
        with: 
          terraform_version: 0.15.3
        env:
          ARM_CLIENT_ID: ${{ steps.myGetSecretAction.outputs.DevOps-PipelineSP-ID }}
          ARM_CLIENT_SECRET: ${{ steps.myGetSecretAction.outputs.DevOps-PipelineSP-Secret }}
          ARM_SUBSCRIPTION_ID: ${{ steps.myGetSecretAction.outputs.SubscriptionID }}
          ARM_TENANT_ID: ${{ steps.myGetSecretAction.outputs.tenantid }}

      - name: Terraform Init
        id: init
        run: terraform init
        env:
          ARM_CLIENT_ID: ${{ steps.myGetSecretAction.outputs.DevOps-PipelineSP-ID }}
          ARM_CLIENT_SECRET: ${{ steps.myGetSecretAction.outputs.DevOps-PipelineSP-Secret }}
          ARM_SUBSCRIPTION_ID: ${{ steps.myGetSecretAction.outputs.SubscriptionID }}
          ARM_TENANT_ID: ${{ steps.myGetSecretAction.outputs.tenantid }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt
        env:
          ARM_CLIENT_ID: ${{ steps.myGetSecretAction.outputs.DevOps-PipelineSP-ID }}
          ARM_CLIENT_SECRET: ${{ steps.myGetSecretAction.outputs.DevOps-PipelineSP-Secret }}
          ARM_SUBSCRIPTION_ID: ${{ steps.myGetSecretAction.outputs.SubscriptionID }}
          ARM_TENANT_ID: ${{ steps.myGetSecretAction.outputs.tenantid }}


      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -out="${{ env.TFPLANNAME }}.plan-$env:GITHUB_RUN_ID"
        continue-on-error: false
        env:
          ARM_CLIENT_ID: ${{ steps.myGetSecretAction.outputs.DevOps-PipelineSP-ID }}
          ARM_CLIENT_SECRET: ${{ steps.myGetSecretAction.outputs.DevOps-PipelineSP-Secret }}
          ARM_SUBSCRIPTION_ID: ${{ steps.myGetSecretAction.outputs.SubscriptionID }}
          ARM_TENANT_ID: ${{ steps.myGetSecretAction.outputs.tenantid }}

      - name: Terraform Show
        id: show
        run: terraform show "${{ env.TFPLANNAME }}.plan-$env:GITHUB_RUN_ID"
        continue-on-error: false
        env:
          ARM_CLIENT_ID: ${{ steps.myGetSecretAction.outputs.DevOps-PipelineSP-ID }}
          ARM_CLIENT_SECRET: ${{ steps.myGetSecretAction.outputs.DevOps-PipelineSP-Secret }}
          ARM_SUBSCRIPTION_ID: ${{ steps.myGetSecretAction.outputs.SubscriptionID }}
          ARM_TENANT_ID: ${{ steps.myGetSecretAction.outputs.tenantid }}

      - name: Upload to blob storage
        uses: azure/CLI@v1
        env: 
          planname: ${{ env.TFPLANNAME }}
          workingdirectory: ${{  env.working_directory  }}
        with:
          azcliversion: 2.0.72
          inlineScript: |
              echo ${{ env.TFPLANNAME }}
              echo "$GITHUB_WORKSPACE/${{ env.working_directory }}${{ env.planname }}.plan-$GITHUB_RUN_ID"
              az storage blob upload --file "$GITHUB_WORKSPACE/${{ env.working_directory }}${{ env.planname }}.plan-$GITHUB_RUN_ID"  --account-name "${{ steps.myGetSecretAction.outputs.terraformstorageaccount }}" --account-key "${{ steps.myGetSecretAction.outputs.tf-storage-key }}" -c "${{ steps.myGetSecretAction.outputs.tfplancontainer }}" -n ${{ env.planname }}.plan-$GITHUB_RUN_ID 
      - name: Terraform Outputs
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        shell: pwsh
        run: |
            Write-Host "Terraform Format and Style ${{ steps.fmt.outcome }}"
            Write-Host "Terraform Initialization ${{ steps.init.outcome }}"
            Write-Host "Terraform Plan ${{ steps.plan.outcome }}"
            echo "${{ env.PLAN }}"
        
      - name: Terraform Change and Destroy check
        id: tfcheck
        shell: pwsh
        env: 
          PLAN: "${{ steps.plan.outputs.stdout }}"
        run: |
            echo "${{ env.PLAN }}" | Out-file ./planfile.txt
            [int]$addcount = ((Get-Content ./planfile.txt | Select-string -Pattern "to destroy." | Out-String).Split(',') | Select-String -Pattern "add" | Out-String).Split(" ")[1]
            [int]$changecount = ((Get-Content ./planfile.txt | Select-string -Pattern "to destroy." | Out-String).Split(',') | Select-String -Pattern "change" | Out-String).Split(" ")[1]
            [int]$destroycount = ((Get-Content ./planfile.txt | Select-string -Pattern "to destroy." | Out-String).Split(',') | Select-String -Pattern "destroy" | Out-String).Split(" ")[1]    
            Write-Host "##[section]$addcount resources are to be added"
            Write-Host "##[warning]$changecount resources are to be changed"
            Write-Host "##[error]$destroycount resources are to be destroyed"
            Write-Host "${{ env.TFDESTROYSALLOWED }}"
            ##Check for destroy and whether permitted
            if ($destroycount -ge 1) { 
            Write-Host "Destroy detected. Checking if allowed.."
            if ("${{ env.TFDESTROYSALLOWED }}" -eq "true") { 
            Write-Host "##[section]$Authorised Destroy detected"
            } else { 
            if ("${{ env.TFDESTROYSALLOWED }}" -ne "true") { 
            Write-Host "##[error]Destroy has been detected but not authorised.."
            throw "Destroy is NOT allowed. Please review this pipeline."
            }
            }
            }
            ##Check for change and whether permitted
            if ($changecount -ge 1) { 
            Write-Host "Change detected. Checking if allowed.."
            if ("${{ env.TFCHANGESALLOWED }}" -eq "true") { 
            write-host "Would proceed"
            } else { 
            if ("${{ env.TFCHANGESALLOWED }}" -ne "true") { 
            Write-Host "Would not proceed.."
            throw "Change is NOT allowed. Please review this pipeline."
            }
            }
            }
      - name: Terraform Plan Status
        if: steps.tfcheck.outcome == 'failure'
        run: exit 1
