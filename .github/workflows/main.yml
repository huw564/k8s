name: test-rg

on: workflow_dispatch

jobs:
  build:
    environment: test-rg
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: pwsh
        working-directory: "./infrastructure/test-rg"
    steps:
    # checkout the repo
    - uses: actions/checkout@v2
    - uses: Azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        enable-AzPSSession: true
    - uses: Azure/get-keyvault-secrets@v1
      with: 
        keyvault: ${{ secrets.devakv }}
        secrets: 'terraformrg, SubscriptionID, DevOps-PipelineSP-ID, DevOps-PipelineSP-Secret, tenantid, terraformstorageaccount, tf-storage-key, tfplancontainer, tfstatecontainer'
      id: myGetSecretAction
      
    - uses: cschleiden/replace-tokens@v1
      with:
        tokenPrefix: '__'
        tokenSuffix: '__'
        files: '["**/*.tf"]'
      env:
        terraformstorageaccount: ${{ steps.myGetSecretAction.outputs.terraformstorageaccount }}
        tfstatecontainer: ${{ steps.myGetSecretAction.outputs.tfstatecontainer }}
        tf-storage-key: ${{ steps.myGetSecretAction.outputs.tf-storage-key }}
        tfstatename: ${{ secrets.tfstatename }}
        rgname1: ${{ secrets.rgname1 }}
        
    - uses: hashicorp/setup-terraform@v1
      with: 
        terraform_version: 0.15.3
      env:
        ARM_CLIENT_ID: ${{ steps.myGetSecretAction.outputs.DevOps-PipelineSP-ID }}
        ARM_CLIENT_SECRET: ${{ steps.myGetSecretAction.outputs.DevOps-PipelineSP-Secret }}
        ARM_SUBSCRIPTION_ID: ${{ steps.myGetSecretAction.outputs.SubscriptionID }}
        ARM_TENANT_ID: ${{ steps.myGetSecretAction.outputs.tenantid }}

    - name: Terraform Init
      id: init
      run: terraform init
      env:
        ARM_CLIENT_ID: ${{ steps.myGetSecretAction.outputs.DevOps-PipelineSP-ID }}
        ARM_CLIENT_SECRET: ${{ steps.myGetSecretAction.outputs.DevOps-PipelineSP-Secret }}
        ARM_SUBSCRIPTION_ID: ${{ steps.myGetSecretAction.outputs.SubscriptionID }}
        ARM_TENANT_ID: ${{ steps.myGetSecretAction.outputs.tenantid }}

    - name: Terraform Format
      id: fmt
      run: terraform fmt
      env:
        ARM_CLIENT_ID: ${{ steps.myGetSecretAction.outputs.DevOps-PipelineSP-ID }}
        ARM_CLIENT_SECRET: ${{ steps.myGetSecretAction.outputs.DevOps-PipelineSP-Secret }}
        ARM_SUBSCRIPTION_ID: ${{ steps.myGetSecretAction.outputs.SubscriptionID }}
        ARM_TENANT_ID: ${{ steps.myGetSecretAction.outputs.tenantid }}


    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color -out="${{ secrets.tfplanname }}.plan-${GITHUB_RUN_ID}"
      continue-on-error: false
      env:
        ARM_CLIENT_ID: ${{ steps.myGetSecretAction.outputs.DevOps-PipelineSP-ID }}
        ARM_CLIENT_SECRET: ${{ steps.myGetSecretAction.outputs.DevOps-PipelineSP-Secret }}
        ARM_SUBSCRIPTION_ID: ${{ steps.myGetSecretAction.outputs.SubscriptionID }}
        ARM_TENANT_ID: ${{ steps.myGetSecretAction.outputs.tenantid }}
        
    - name: Terraform Show
      id: show
      run: terraform show "${{ secrets.tfplanname }}.plan-${GITHUB_RUN_ID}" | Out-File ./planfile.txt
      continue-on-error: false
      env:
        ARM_CLIENT_ID: ${{ steps.myGetSecretAction.outputs.DevOps-PipelineSP-ID }}
        ARM_CLIENT_SECRET: ${{ steps.myGetSecretAction.outputs.DevOps-PipelineSP-Secret }}
        ARM_SUBSCRIPTION_ID: ${{ steps.myGetSecretAction.outputs.SubscriptionID }}
        ARM_TENANT_ID: ${{ steps.myGetSecretAction.outputs.tenantid }}


    - name: Run Azure PowerShell script
      uses: azure/powershell@v1
      with:
        inlineScript: |
          get-childitem -recurse
          ##Set The Subscription Context
          Set-AzContext -SubscriptionId "${{ steps.myGetSecretAction.outputs.SubscriptionID }}"

          ##Get the storage account Key
          $storageAccountKey = (Get-AzStorageAccountKey -ResourceGroupName "${{ steps.myGetSecretAction.outputs.terraformrg }}" -Name "${{ steps.myGetSecretAction.outputs.terraformstorageaccount }}").Value[0]

          ##Create the context
          $storageacct = New-AzStorageContext -StorageAccountName "${{ steps.myGetSecretAction.outputs.terraformstorageaccount }}" -StorageAccountKey $storageAccountKey

          Set-AzStorageBlobContent -File "${{ secrets.tfplanname }}.plan-${GITHUB_RUN_ID}" -Container "${{ steps.myGetSecretAction.outputs.tfplancontainer }}" -Context $storageacct -Force

        azPSVersion: "latest"

          
    - name: Terraform Outputs
      env:
        PLAN: "${{ steps.plan.outputs.stdout }}"
      shell: pwsh
      run: |
          Write-Host "Terraform Format and Style ${{ steps.fmt.outcome }}"
          Write-Host "Terraform Initialization ${{ steps.init.outcome }}"
          Write-Host "Terraform Plan ${{ steps.plan.outcome }}"
          write-host "Show Plan"
          write-host ${process.env.PLAN}

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1
       
      
      
    - name: Terraform Apply
      run: terraform apply -auto-approve
      env:
        ARM_CLIENT_ID: ${{ steps.myGetSecretAction.outputs.DevOps-PipelineSP-ID }}
        ARM_CLIENT_SECRET: ${{ steps.myGetSecretAction.outputs.DevOps-PipelineSP-Secret }}
        ARM_SUBSCRIPTION_ID: ${{ steps.myGetSecretAction.outputs.SubscriptionID }}
        ARM_TENANT_ID: ${{ steps.myGetSecretAction.outputs.tenantid }}
